name: backend CI/CD - Debug Version

on:
  push:
    branches:
      - "feature/**"
      - "develop"
      - "master"

jobs:
  test-backend:
    name: Install app and test it
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install wait-on
        run: npm install --save-dev wait-on

      - name: Install dependencies
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npm ci

      # Add health check endpoint to your app first!
      - name: Add health check to index.js
        run: |
          # Backup original file
          cp api/index.js api/index.js.backup

          # Add health check before app.listen
          sed -i '/app\.listen/i\
          // Health check endpoint\
          app.get("/health", (req, res) => {\
            res.status(200).json({ status: "OK", timestamp: new Date().toISOString() });\
          });\
          \
          // Error handling\
          process.on("uncaughtException", (error) => {\
            console.error("Uncaught Exception:", error);\
          });\
          \
          process.on("unhandledRejection", (reason, promise) => {\
            console.error("Unhandled Rejection at:", promise, "reason:", reason);\
          });' api/index.js

      - name: Start backend server in the background
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm start > server.log 2>&1 &
          SERVER_PID=$!
          echo "Server started with PID: $SERVER_PID"
          echo $SERVER_PID > server.pid
          sleep 10

      - name: Debug server status
        run: |
          echo "=== Server Process ==="
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            ps -p $PID || echo "Server process not running"
          fi

          echo "=== All Node Processes ==="
          ps aux | grep node || echo "No node processes found"

          echo "=== Network Status ==="
          netstat -tlnp | grep 3000 || echo "Port 3000 not listening"

          echo "=== Server Logs ==="
          cat server.log

          echo "=== Test Local Curl ==="
          curl -v http://localhost:3000/health || echo "Health check failed"
          curl -v http://127.0.0.1:3000/health || echo "127.0.0.1 health check failed"

      - name: Wait for server to be ready
        run: |
          echo "Waiting for health endpoint..."
          npx wait-on http://localhost:3000/health --timeout 60000 --interval 2000 || (
            echo "=== FINAL DEBUG INFO ==="
            echo "Server not responding after 60 seconds"
            cat server.log
            ps aux | grep node
            netstat -tlnp | grep 3000
            exit 1
          )

      - name: Test basic API endpoint
        run: |
          echo "Testing basic connectivity..."
          curl -f http://localhost:3000/health || (echo "Health check failed" && exit 1)
          echo "Health check passed!"

      - name: Show server logs (for debug)
        if: always()
        run: |
          echo "=== Final Server Logs ==="
          cat server.log

      - name: Install Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Download SoapUI
        run: |
          wget https://s3.amazonaws.com/downloads.eviware/soapuios/5.7.0/SoapUI-5.7.0-linux-bin.tar.gz
          tar -xzf SoapUI-5.7.0-linux-bin.tar.gz
          mv SoapUI-5.7.0 soapui

      - name: Run SoapUI tests
        run: |
          ./soapui/bin/testrunner.sh -r -j -f reports/ soapui-tests/users-soapui-tests.xml
